//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
  Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, utoipa :: ToSchema,
)]
#[sea_orm(table_name = "rooms")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub room_number: i32,
  #[sea_orm(unique)]
  pub tenant_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::fees_room_assignment::Entity")]
  FeesRoomAssignment,
  #[sea_orm(
    belongs_to = "super::users::Entity",
    from = "Column::TenantId",
    to = "super::users::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Users,
}

impl Related<super::fees_room_assignment::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::FeesRoomAssignment.def()
  }
}

impl Related<super::users::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Users.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
