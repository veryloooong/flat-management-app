/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as authLayoutImport } from './routes/(auth)/_layout'
import { Route as authLayoutRegisterImport } from './routes/(auth)/_layout/register'
import { Route as authLayoutPasswordImport } from './routes/(auth)/_layout/password'
import { Route as authLayoutLoginImport } from './routes/(auth)/_layout/login'

// Create Virtual Routes

const authImport = createFileRoute('/(auth)')()

// Create/Update Routes

const authRoute = authImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authLayoutRoute = authLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => authRoute,
} as any)

const authLayoutRegisterRoute = authLayoutRegisterImport.update({
  path: '/register',
  getParentRoute: () => authLayoutRoute,
} as any)

const authLayoutPasswordRoute = authLayoutPasswordImport.update({
  path: '/password',
  getParentRoute: () => authLayoutRoute,
} as any)

const authLayoutLoginRoute = authLayoutLoginImport.update({
  path: '/login',
  getParentRoute: () => authLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/_layout': {
      id: '/_layout'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authLayoutImport
      parentRoute: typeof authRoute
    }
    '/(auth)/_layout/login': {
      id: '/_layout/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLayoutLoginImport
      parentRoute: typeof authLayoutImport
    }
    '/(auth)/_layout/password': {
      id: '/_layout/password'
      path: '/password'
      fullPath: '/password'
      preLoaderRoute: typeof authLayoutPasswordImport
      parentRoute: typeof authLayoutImport
    }
    '/(auth)/_layout/register': {
      id: '/_layout/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authLayoutRegisterImport
      parentRoute: typeof authLayoutImport
    }
  }
}

// Create and export the route tree

interface authLayoutRouteChildren {
  authLayoutLoginRoute: typeof authLayoutLoginRoute
  authLayoutPasswordRoute: typeof authLayoutPasswordRoute
  authLayoutRegisterRoute: typeof authLayoutRegisterRoute
}

const authLayoutRouteChildren: authLayoutRouteChildren = {
  authLayoutLoginRoute: authLayoutLoginRoute,
  authLayoutPasswordRoute: authLayoutPasswordRoute,
  authLayoutRegisterRoute: authLayoutRegisterRoute,
}

const authLayoutRouteWithChildren = authLayoutRoute._addFileChildren(
  authLayoutRouteChildren,
)

interface authRouteChildren {
  authLayoutRoute: typeof authLayoutRouteWithChildren
}

const authRouteChildren: authRouteChildren = {
  authLayoutRoute: authLayoutRouteWithChildren,
}

const authRouteWithChildren = authRoute._addFileChildren(authRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof authLayoutRouteWithChildren
  '/login': typeof authLayoutLoginRoute
  '/password': typeof authLayoutPasswordRoute
  '/register': typeof authLayoutRegisterRoute
}

export interface FileRoutesByTo {
  '/': typeof authLayoutRouteWithChildren
  '/login': typeof authLayoutLoginRoute
  '/password': typeof authLayoutPasswordRoute
  '/register': typeof authLayoutRegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof authRouteWithChildren
  '/_layout': typeof authLayoutRouteWithChildren
  '/_layout/login': typeof authLayoutLoginRoute
  '/_layout/password': typeof authLayoutPasswordRoute
  '/_layout/register': typeof authLayoutRegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/password' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/password' | '/register'
  id:
    | '__root__'
    | '/'
    | '/_layout'
    | '/_layout/login'
    | '/_layout/password'
    | '/_layout/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRoute: typeof authRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRoute: authRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/"
      ]
    },
    "/": {
      "filePath": "(auth)",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "(auth)/_layout.tsx",
      "parent": "/",
      "children": [
        "/_layout/login",
        "/_layout/password",
        "/_layout/register"
      ]
    },
    "/_layout/login": {
      "filePath": "(auth)/_layout/login.tsx",
      "parent": "/_layout"
    },
    "/_layout/password": {
      "filePath": "(auth)/_layout/password.tsx",
      "parent": "/_layout"
    },
    "/_layout/register": {
      "filePath": "(auth)/_layout/register.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
