//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "rooms")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub room_number: i32,
  #[sea_orm(unique)]
  pub tenant_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::fees_room::Entity")]
  FeesRoom,
  #[sea_orm(has_many = "super::transactions::Entity")]
  Transactions,
  #[sea_orm(
    belongs_to = "super::users::Entity",
    from = "Column::TenantId",
    to = "super::users::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Users,
}

impl Related<super::fees_room::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::FeesRoom.def()
  }
}

impl Related<super::transactions::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Transactions.def()
  }
}

impl Related<super::users::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Users.def()
  }
}

impl Related<super::fees::Entity> for Entity {
  fn to() -> RelationDef {
    super::fees_room::Relation::Fees.def()
  }
  fn via() -> Option<RelationDef> {
    Some(super::fees_room::Relation::Rooms.def().rev())
  }
}

impl ActiveModelBehavior for ActiveModel {}
